@using System.Text.RegularExpressions
@using System.Drawing.Imaging
@using System.IO
@model TestWrapper

@{
    Dictionary<string, string> cssList = new Dictionary<string, string>();
}

<div class="flex flex-col lg:flex-row">
    @if (Model.Test != null)
    {
        @*TIMER*@
        @if (Model.TimeLimited)
        {
            <p class="timer-wrapper">
                Оставшееся время: <span id="time">@Model.SecLimit</span> сек.
            </p>
        }

        <style>
            #time {
                font-size: 1.2rem;
                font-weight: bold;
            }

            .timer-wrapper {
                border-bottom: solid 1px black;
                font-size: 1.1rem;
                margin-bottom: 25px;
            }
        </style>
        @*END TIMER*@

        // PICTURE
        @if (Model.Test.Pictures != null)
        {
            @foreach (var pic in Model.Test.Pictures)
            {
                MemoryStream stream = new MemoryStream();
                pic.Save(stream, ImageFormat.Png);
                byte[] data = new byte[stream.Length];
                stream.Position = 0;
                stream.Read(data, 0, data.Length);
                <img class="lg:w-1/2 lg:mr-8" src="data:image/jpeg;base64,@Convert.ToBase64String(data)" />
                pic.Dispose();
            }
        }

        <div class="prose max-w-full">
            <form id="answers-form" method="POST" action="@Model.Link">
                <input hidden name="testId" value="@Model.TestId" />
                <input hidden name="hash" value="@Model.Hash" />
                @{
                    var matches = Regex.Matches(Model.Test.Text, "<(.*?)>");
                    for (int i = 0; i < matches.Count; i++)
                    {
                        // SIZE CHECK
                        string classId = $"{i}";
                        string size = $"22";
                        string inputName = matches[i].Groups[1].Value;
                        if (matches[i].Groups[1].Value.Contains(":"))
                        {
                            size = $"{15 + 7 * Convert.ToInt32(matches[i].Groups[1].Value.Split(':')[1])}";
                            inputName = matches[i].Groups[1].Value.Split(':')[0];
                        }
                        cssList.Add(classId, size);

                        // INPUT
                        if (matches[i].Groups[1].Value.StartsWith("CB_"))
                        {
                            Model.Test.Text = Model.Test.Text.Replace(matches[i].Groups[0].Value,
                                $"<label class=\"label cursor-pointer\">" +
                                $" <input class=\"checkbox\" type=\"checkbox\" name=\"{matches[i].Groups[1].Value.Remove(0, 3)}\"/> " +
                                $" <span class=\"label-text\">{matches[i].Groups[1].Value.Remove(0, 3)}</span>") +
                                              $"</label>";
                        }
                        else
                        {
                            Model.Test.Text = Model.Test.Text.Replace(matches[i].Groups[0].Value,
                                $"\\FormInput[1][input input-sm mx-2 my-1 dynamiccssinputsize{classId}][]{{{inputName}}}");
                        }
                    }
                }
                <p class="overflow-x-auto overflow-y-hidden">@Html.Raw(Model.Test.Text.Replace("\n", "<br/>"))</p>

                @if (Model.Test.CheckBoxes != null)
                {
                    <input hidden name="testsCount" value="@(Model.Test.CheckBoxes.Length + matches.Count)" />
                    @foreach (var t in Model.Test.CheckBoxes)
                    {
                        <label class="label cursor-pointer">
                            <input class="checkbox" type="checkbox" name="@t" />
                            <span class="label-text">@t</span>
                        </label>
                    }
                }
                else
                {
                    <input hidden name="testsCount" value="@matches.Count" />
                }

                <input type="submit" class="btn" value="@Model.BtnText" />
            </form>
            <style>
                .test-start-complete-button {
                    background-color: #5a6269;
                    color: white;
                    -ms-border-radius: 10px;
                    border-radius: 10px;
                    padding: 7px;
                    margin-top: 20px;
                }
            </style>
        </div>
    }
    else
    {
        <h2>Произошла ошибка при генерации задания</h2>
    }
</div>

@{
    <style>
        @foreach (var css in cssList)
        {
            @Html.Raw($".dynamiccssinputsize{css.Key}{{width: {css.Value}px}}")
        }
    </style>
}